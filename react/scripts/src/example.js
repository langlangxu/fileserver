/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var _json =  
[
  {
      "id": 1388534400000,
      "author": "Pete Hunt",
      "text": "Hey there!"
  }
]
var _newjson = _json


var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    // console.log(this.props.children)
    // console.log(rawMarkup)
    return { __html: rawMarkup };
  },
  setStyle:function(){
    return {color:this.props.color}
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        {
          //<Signature>{this.props.signature}</Signature>
        }
        <span dangerouslySetInnerHTML={this.rawMarkup()} style={this.setStyle()}/>
      </div>
    );
  }
});
var Signature = React.createClass({
  render:function(){
    return <a>{this.props.children}</a>
  }
})
var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type:'POST',
      cache: false,
      data:JSON.stringify(_newjson),
      success: function(data) {
        _json = data
        this.setState({data: _json});
      }.bind(this),
      error: function(xhr, status, err) {
        alert('请求失败！')
        this.setState({data:_json})
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    // comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    _newjson = _json.concat(comment)
    this.setState({data: _newjson});
    // _json.push(comment)
    this.loadCommentsFromServer()
    
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    console.log(this.state.data)
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} that={this} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    console.log(this.props.data)
    console.log(this.props.that)
    // this.props.that.setState([])
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id} signature={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    // console.log('----------------------------render')
    // console.log(commentNodes)
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  },
  componentWillMount:function(){
    // console.log('----------------------------------will')
  },
  componentDidMount:function(){
    // console.log('-----------------------------------did')
  },
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          ref="name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/json" pollInterval={500000000} />,
  document.getElementById('content')
);